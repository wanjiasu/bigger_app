version: '3.9'
services:
  db:
    container_name: db_postgres
    image: postgres:15
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_admin -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  frontend:
    container_name: nextjs-app
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3001:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    container_name: fastapi-app
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - FASTAPI_DB_URL=postgresql://fp_user:fp_pass@db:5432/fp_db
      - ONE_API_URL=${ONE_API_URL}
      - ONE_API_KEY=${ONE_API_KEY}
      - GPT4_CHANNEL_ID=${GPT4_CHANNEL_ID:-1}
      - DEEPSEEK_CHANNEL_ID=${DEEPSEEK_CHANNEL_ID:-2}
      - CLAUDE_CHANNEL_ID=${CLAUDE_CHANNEL_ID:-3}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge

