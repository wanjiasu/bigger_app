version: '3.9'

services:
  db:
    container_name: xiaohongshu_db_prod
    image: postgres:15-alpine
    restart: always
    env_file:
      - .env.prod
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_admin -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - xiaohongshu_network

  backend:
    container_name: xiaohongshu_backend_prod
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env.prod
    environment:
      - FASTAPI_DB_URL=postgresql://fp_user:fp_pass@db:5432/fp_db
    depends_on:
      db:
        condition: service_healthy
    networks:
      - xiaohongshu_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.xiaohongshu.yourdomain.com`)"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  frontend:
    container_name: xiaohongshu_frontend_prod
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.xiaohongshu.yourdomain.com
    depends_on:
      - backend
    networks:
      - xiaohongshu_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`xiaohongshu.yourdomain.com`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  traefik:
    container_name: xiaohongshu_traefik_prod
    image: traefik:v3.0
    restart: always
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=your-email@example.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--global.checknewversion=false"
      - "--global.sendanonymoususage=false"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - xiaohongshu_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.yourdomain.com`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"

  redis:
    container_name: xiaohongshu_redis_prod
    image: redis:7-alpine
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - xiaohongshu_network

volumes:
  postgres_data_prod:
  traefik_letsencrypt:
  redis_data_prod:

networks:
  xiaohongshu_network:
    driver: bridge 